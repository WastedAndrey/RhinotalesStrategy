//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerTeamComponent playerTeam { get { return (PlayerTeamComponent)GetComponent(GameComponentsLookup.PlayerTeam); } }
    public bool hasPlayerTeam { get { return HasComponent(GameComponentsLookup.PlayerTeam); } }

    public void AddPlayerTeam(PlayerTeam newTeam) {
        var index = GameComponentsLookup.PlayerTeam;
        var component = (PlayerTeamComponent)CreateComponent(index, typeof(PlayerTeamComponent));
        component.Team = newTeam;
        AddComponent(index, component);
    }

    public void ReplacePlayerTeam(PlayerTeam newTeam) {
        var index = GameComponentsLookup.PlayerTeam;
        var component = (PlayerTeamComponent)CreateComponent(index, typeof(PlayerTeamComponent));
        component.Team = newTeam;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerTeam() {
        RemoveComponent(GameComponentsLookup.PlayerTeam);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerTeam;

    public static Entitas.IMatcher<GameEntity> PlayerTeam {
        get {
            if (_matcherPlayerTeam == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerTeam);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerTeam = matcher;
            }

            return _matcherPlayerTeam;
        }
    }
}
